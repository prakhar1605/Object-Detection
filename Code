import cv2
import numpy as np

# Load YOLO
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg") 
layer_names = net.getLayerNames()
output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]  

with open("coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]

# Start video capture
cap = cv2.VideoCapture(0)  

while True:
    ret, frame = cap.read()  
    
    # Prepare the image for YOLO
    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)  # Pass the frame to YOLO
    outs = net.forward(output_layers)  # Run forward pass to get outputs

    class_ids = []  
    confidences = []  
    boxes = []  # List to store the bounding box coordinates

    height, width, channels = frame.shape 

    # Process the detections
    for out in outs:
        for detection in out:
            scores = detection[5:]  # Scores are the probabilities of each class
            class_id = np.argmax(scores)  # Find the class with the highest score
            confidence = scores[class_id]  
            if confidence > 0.5: 
                center_x = int(detection[0] * width)  # Calculate center x of the object
                center_y = int(detection[1] * height)  # Calculate center y of the object
                w = int(detection[2] * width)  # Calculate width of the object
                h = int(detection[3] * height)  # Calculate height of the object
                x = int(center_x - w / 2)  # Calculate the top-left x coordinate of the bounding box
                y = int(center_y - h / 2)  # Calculate the top-left y coordinate of the bounding box

                boxes.append([x, y, w, h]) 
                confidences.append(float(confidence))  
                class_ids.append(class_id)  

    # Perform non-maxima suppression to remove redundant boxes
    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    # Draw boxes and labels on the Detected objects
    if len(indexes) > 0:
        for i in indexes.flatten():
            x, y, w, h = boxes[i]
            label = str(classes[class_ids[i]]) 
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)  # Draw bounding box
            cv2.putText(frame, label, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)  

    # result
    cv2.imshow("Real-Time Object Detection", frame)

    # exit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release video capture and close the model
cap.release()
cv2.destroyAllWindows()
